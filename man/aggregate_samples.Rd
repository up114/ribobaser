% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate_samples.R
\name{aggregate_samples}
\alias{aggregate_samples}
\title{Aggregate Samples}
\usage{
aggregate_samples(
  TE,
  metadata = c("Ribobase_QC_dedup_data"),
  group_by = c("study", "cell_line"),
  fun = c("mean")
)
}
\arguments{
\item{TE}{numeric matrix or data.frame with genes in rows and samples in
columns. Column names must match the \code{Experiment} identifiers present in
\code{Ribobase_QC_dedup_data}.}

\item{group_by}{character string specifying the metadata field to use when
combining samples. Either \code{'study'} or \code{'cell_line'}. Defaults to \code{'study'}.}

\item{fun}{aggregation function identifier. Currently only \code{'mean'} is
supported.}
}
\value{
A numeric matrix with genes in rows and aggregated sample groups in
columns. Column names correspond to the selected metadata grouping.
}
\description{
Samples can be aggregated by cell line or study using the group mean.
Optional features to Implement later
a) Support only ribo or RNA
b) Provide option to use either Ribobase_QC_non_dedup_data or Ribobase_QC_dedup_data
c) Provide support for other mathematical functions to aggregate the numerical values
d) Need to explore Battle_GR paper for additional ideas.
e) Potentially add SVA/PCA based confounder correction. This might be in a different script
}
\details{
Given TE matrix with genes in rows and samples in
columns, collapse samples according to metadata supplied in
\code{Ribobase_QC_dedup_data}. The function currently supports aggregating by
\code{Study} (GSE accession) or by \verb{Cell line}, computing the mean TE for each gene
within the chosen grouping.
}
\examples{
data("Ribobase_QC_dedup_data", package = "ribobaser")
example_samples <- Ribobase_QC_dedup_data$Experiment[1:4]
TE <- matrix(
  seq_along(example_samples) + rep(0:1, each = length(example_samples)),
  nrow = 2,
  dimnames = list(paste0("g", 1:2), example_samples)
)
aggregate_samples(TE, group_by = "study")
aggregate_samples(TE, group_by = "cell_line")
}
